apply plugin: 'java'
apply plugin: 'maven-publish'
apply plugin: 'osgi'

ext {
	expectedGradleVersion = '4.9'
	projName = 'hibernate-json-contributor'
	projDescription = 'A type contributor allowing Hibernate to use javax.json.JsonArray, javax.json.JsonObject and javax.json.JsonStructure objects inside entities. Used for PostgreSQL types json/jsonb.'
}

group = 'com.mopano'
version = '1.3'

sourceCompatibility = '1.8'
targetCompatibility = '1.8'
[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

repositories {
	mavenLocal()
	mavenCentral()
}

configurations {
	glassfish
	johnzon
	jackson
	arrayTest
	settingsLoader
	mysqlDetect
}

sourceSets {
	jackson {
		resources {
			srcDir 'src/jackson/resources'
		}
	}
	arrayTest {
		java.srcDir 'src/arraytest/java'
		resources.srcDir 'src/arraytest/resources'
	}
	settingsLoader {
		java.srcDir 'src/settingsLoader/java'
		resources.srcDir 'src/settingsLoader/resources'
	}
	mysqlDetect {
		java.srcDir 'src/mysqlDetect/java'
		resources.srcDir 'src/mysqlDetect/resources'
	}
}


dependencies {
	compile group: 'org.hibernate', name: 'hibernate-core', version: '5.2.0.Final'
	compile group: 'javax.json', name: 'javax.json-api', version: '1.0'
	testCompile group: 'junit', name: 'junit', version: '4.10'
	// postgresql driver requires custom version patch to support null values. see pgjdbc.patch
	testRuntime group: 'org.postgresql', name: 'postgresql', version: '42.2.2'
	glassfish group: 'org.glassfish', name: 'javax.json', version: '1.0.4'
	johnzon group: 'org.apache.johnzon', name: 'johnzon-core', version: '0.9.5'
	jackson group: 'com.github.pgelinas', name: 'jackson-javax-json', version: '0.9.0'

	arrayTestCompile sourceSets.main.output
	arrayTestCompile configurations.compile
	arrayTestCompile group: 'junit', name: 'junit', version: '4.10'
	arrayTestCompile group: 'com.mopano', name: 'hibernate-array-contributor', version: '1.1'
	arrayTestRuntime configurations.runtime
	arrayTestRuntime configurations.testRuntime

	settingsLoaderCompile sourceSets.main.output
	settingsLoaderCompile configurations.compile
	settingsLoaderCompile group: 'org.apache.johnzon', name: 'johnzon-core', version: '0.9.5'
	settingsLoaderCompile group: 'junit', name: 'junit', version: '4.10'
	settingsLoaderRuntime configurations.runtime
	settingsLoaderRuntime group: 'mysql', name: 'mysql-connector-java', version: '8.0.22'

	mysqlDetectCompile sourceSets.main.output
	mysqlDetectCompile configurations.compile
	mysqlDetectCompile group: 'org.apache.johnzon', name: 'johnzon-core', version: '0.9.5'
	mysqlDetectCompile group: 'junit', name: 'junit', version: '4.10'
	mysqlDetectRuntime configurations.runtime
	mysqlDetectRuntime group: 'mysql', name: 'mysql-connector-java', version: '8.0.22'
}

jar {
	manifest = null
}

task compile
compile.dependsOn compileJava, processResources, compileTestJava, processTestResources

task arrayTest(type: Test, dependsOn: compile){
	// proof of concept for the array contributor extensibility
	description = "Run array tests (located in src/arraytest/...)."
	systemProperty 'expect.provider', 'org.glassfish.json.JsonProviderImpl'
	systemProperty 'json.provider.short', 'glassfish'
	testClassesDirs = sourceSets.arrayTest.output.classesDirs
	classpath = sourceSets.arrayTest.runtimeClasspath + configurations.glassfish
}

task testProviderGlassfish(type:Test, dependsOn: compile) {
	systemProperty 'expect.provider', 'org.glassfish.json.JsonProviderImpl'
	systemProperty 'json.provider.short', 'glassfish'
	classpath = classpath + configurations.glassfish
}

task testProviderJohnzon(type:Test, dependsOn: compile) {
	systemProperty 'expect.provider', 'org.apache.johnzon.core.JsonProviderImpl'
	systemProperty 'json.provider.short', 'johnzon'
	classpath = classpath + configurations.johnzon
}

task testProviderJackson(type:Test, dependsOn: compile) {
	systemProperty 'expect.provider', 'com.github.pgelinas.jackson.javax.json.spi.JacksonProvider'
	systemProperty 'json.provider.short', 'jackson'
	classpath = configurations.jackson + classpath + sourceSets.jackson.getRuntimeClasspath()
}

task testMysqlAndSettings(type: Test, dependsOn: compile) {
	systemProperty 'expect.provider', 'org.apache.johnzon.core.JsonProviderImpl'
	systemProperty 'json.provider.short', 'johnzon'
	testClassesDirs = sourceSets.settingsLoader.output.classesDirs
	classpath = sourceSets.settingsLoader.runtimeClasspath
}

task testMysqlDetect(type: Test, dependsOn: compile) {
	systemProperty 'expect.provider', 'org.apache.johnzon.core.JsonProviderImpl'
	systemProperty 'json.provider.short', 'johnzon'
	testClassesDirs = sourceSets.mysqlDetect.output.classesDirs
	classpath = sourceSets.mysqlDetect.runtimeClasspath
}

test.dependsOn testProviderGlassfish, testProviderJohnzon, testProviderJackson, arrayTest, testMysqlAndSettings, testMysqlDetect
test.actions = []

task sourcesJar(type: Jar, dependsOn: compileJava) {
	from sourceSets.main.allSource
	classifier = 'sources'
}
task javadocJar(type: Jar, dependsOn: 'javadoc') {
	from javadoc.destinationDir
	classifier = 'javadoc'
}

publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
			artifact sourcesJar
			artifact javadocJar

			// Maven publish plugin adds ALL dependencies with 'runtime' scope
			// see https://github.com/gradle/gradle/blob/b004f39ece183176bf77c1eebc4aa5cbc20ca5cc/subprojects/maven/src/main/java/org/gradle/api/publish/maven/tasks/GenerateMavenPom.java#L104
			pom.withXml {
				Node projNode = asNode()
				projNode.children().each { projSubnode ->
					if (projSubnode.name().getLocalPart().equals('dependencies')) {
						projSubnode.children().each { depnode ->
							if (depnode.name().getLocalPart().equals('dependency')) {
								depnode.children().each { depchild ->
									if (depchild.name().getLocalPart().equals('scope')) {
										depchild.setValue('compile')
									}
								}
							}
						}
					}
				}

				// shamelessly copied from Hibernate build plugin
				projNode.appendNode('name', projName)
				projNode.appendNode('description', projDescription)
				Node licenseNode = projNode.appendNode('licenses').appendNode('license')
				licenseNode.appendNode('name', 'Modified BSD License')
				licenseNode.appendNode('url', 'https://opensource.org/licenses/BSD-3-Clause')

				licenseNode.appendNode('distribution', 'repo')
				projNode.appendNode('url', 'https://github.com/mopano/hibernate-json-type')
				Node scmNode = projNode.appendNode('scm')
				scmNode.appendNode('url', 'https://github.com/mopano/hibernate-json-type')
				scmNode.appendNode('connection', 'scm:git:https://github.com/mopano/hibernate-json-type.git')
				scmNode.appendNode('developerConnection', 'scm:git:git@github.com:mopano/hibernate-json-type.git')

				Node developersNode = projNode.appendNode('developers')
				Node developerNode = developersNode.appendNode('developer')
				developerNode.appendNode('id', 'coladict')
				developerNode.appendNode('name', 'Yordan Gigov')
				developerNode.appendNode('organization', 'Mopano')
				developerNode.appendNode('organizationUrl', 'https://mopano.com')
			}
		}
	}
}

model {
	tasks.generatePomFileForMavenJavaPublication {
		destination = file( "$project.buildDir/generated-pom.xml" )
	}
}

wrapper {
	gradleVersion = expectedGradleVersion
}

def dolint = hasProperty("lint") ? getProperty("lint") : null;

if ( dolint != null ) {
	if ( dolint.contains("deprecation") ) {
		gradle.projectsEvaluated {
			tasks.withType(JavaCompile) {
				options.compilerArgs << "-Xlint:deprecation"
			}
		}
	}
	if ( dolint.contains("unchecked") ) {
		gradle.projectsEvaluated {
			tasks.withType(JavaCompile) {
				options.compilerArgs << "-Xlint:unchecked"
			}
		}
	}
}
